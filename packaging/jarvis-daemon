#!/usr/bin/env python3
"""
JARVIS System Daemon
Main entry point for JARVIS when running as a system service
"""

import sys
import os
import signal
import logging
from pathlib import Path

# Add JARVIS to Python path
sys.path.insert(0, '/usr/lib/jarvis')

from jarvis.main import Jarvis
from jarvis.config import Config

class JarvisDaemon:
    def __init__(self):
        self.jarvis = None
        self.running = False
        self.setup_logging()
        
    def setup_logging(self):
        """Setup system logging"""
        log_dir = Path(os.environ.get('JARVIS_LOG_DIR', '/var/log/jarvis'))
        log_dir.mkdir(parents=True, exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_dir / 'jarvis.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger('jarvis-daemon')
        
    def signal_handler(self, signum, frame):
        """Handle system signals"""
        self.logger.info(f"Received signal {signum}, shutting down gracefully...")
        self.running = False
        if self.jarvis:
            self.jarvis.stop()
            
    def setup_environment(self):
        """Setup environment for system service"""
        # Ensure required directories exist
        for dir_name in ['JARVIS_DATA_DIR', 'JARVIS_MODELS_DIR', 'JARVIS_LOG_DIR']:
            dir_path = Path(os.environ.get(dir_name))
            dir_path.mkdir(parents=True, exist_ok=True)
            
        # Set default model paths if not configured
        models_dir = Path(os.environ.get('JARVIS_MODELS_DIR', '/var/lib/jarvis/models'))
        if not os.getenv('TTS_MODEL_ONNX'):
            os.environ['TTS_MODEL_ONNX'] = str(models_dir / 'piper' / 'en_US-libritts_r-medium.onnx')
        if not os.getenv('TTS_MODEL_JSON'):
            os.environ['TTS_MODEL_JSON'] = str(models_dir / 'piper' / 'en_US-libritts_r-medium.onnx.json')
        if not os.getenv('STT_MODEL'):
            os.environ['STT_MODEL'] = 'base'
        if not os.getenv('LLM_MODEL'):
            os.environ['LLM_MODEL'] = 'codegemma:7b-instruct-q5_K_M'
            
    def run(self):
        """Main daemon loop"""
        self.logger.info("Starting JARVIS daemon...")
        
        # Setup signal handlers
        signal.signal(signal.SIGTERM, self.signal_handler)
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGHUP, self.signal_handler)
        
        try:
            # Setup environment
            self.setup_environment()
            
            # Initialize JARVIS
            self.logger.info("Initializing JARVIS...")
            self.jarvis = Jarvis()
            
            self.running = True
            self.logger.info("JARVIS daemon started successfully")
            
            # Main service loop
            while self.running:
                try:
                    # Keep the service alive and responsive
                    self.jarvis.run()
                except Exception as e:
                    self.logger.error(f"Error in main loop: {e}", exc_info=True)
                    if self.running:
                        self.logger.info("Restarting main loop...")
                        continue
                    else:
                        break
                        
        except Exception as e:
            self.logger.error(f"Fatal error starting JARVIS: {e}", exc_info=True)
            return 1
        finally:
            self.logger.info("JARVIS daemon stopped")
            
        return 0

if __name__ == '__main__':
    daemon = JarvisDaemon()
    sys.exit(daemon.run())
